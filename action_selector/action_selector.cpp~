#include <iostream>
#include <yarp/os/all.h>
#include <yarp/sig/all.h>
#include <yarp/dev/all.h>
#include "../class/YarpPortReader.h"
#include <vector>
#include "../class/MotorController.h"
#include <gsl/gsl_math.h>
#include <unistd.h>
#include "../class/StringServer.h"

void arm_move(MotorController* sim, MotorController* icub) {
	
	std::vector<double> vect;
	vect.resize(16);
	vect[0]=-48.2991;
	vect[1]=70.7504;
	vect[2]=0.000272427;
	vect[3]=50.0003;
	vect[4]=2.8192e-05;
	vect[5]=5.66584e-06;
	vect[6]=6.42255e-06;
	vect[7]=59.001;
	vect[8]=20.0003;
	vect[9]=20.0003;
	vect[10]=20.0003;
	vect[11]=10.0002;
	vect[12]=10.0002;
	vect[13]=10.0002;
	vect[14]=10.0002;
	vect[15]=10.0002;
	sim->sendCommand(vect);
	icub->sendCommand(vect);sleep(2);
	
	vect[0]=-32.5484;
	vect[1]=30.5509;
	vect[2]=4.68021;
	vect[3]=50.0002;
	vect[4]=3.54488e-05;
	vect[5]=2.9109e-06;
	vect[6]=8.50143e-06;
	vect[7]=59.001;
	vect[8]=20.0003;
	vect[9]=20.0003;
	vect[10]=20.0003;
	vect[11]=10.0002;
	vect[12]=10.0002;
	vect[13]=10.0002;
	vect[14]=10.0002;
	vect[15]=10.0002;
	
	icub->sendCommand(vect);sleep(2);
	
	vect[0]=-35.6981;
	vect[1]=14.4717;
	vect[2]=32.7603;
	vect[3]=64.2543;
	vect[4]=-25.2;
	vect[5]=-1.51008e-07;
	vect[6]=8.89084e-06;
	vect[7]=59.001;
	vect[8]=20.0003;
	vect[9]=20.0003;
	vect[10]=20.0003;
	vect[11]=10.0002;
	vect[12]=10.0002;
	vect[13]=10.0002;
	vect[14]=10.0002;
	vect[15]=10.0002;
	
	icub->sendCommand(vect);
	
}

int main() {
	yarp::os::Network yarp;
	YarpPortReader obj1_command("/icub_kovan/action_selector/obj1_head_motor_command");
	YarpPortReader obj2_command("/icub_kovan/action_selector/obj2_head_motor_command");
	YarpPortReader obj3_command("/icub_kovan/action_selector/obj3_head_motor_command");
	YarpPortReader gaze1_command("/icub_kovan/action_selector/gaze1_head_motor_command");
	YarpPortReader gaze2_command("/icub_kovan/action_selector/gaze2_head_motor_command");
	YarpPortReader human_command("/icub_kovan/action_selector/human_head_motor_command");
	YarpPortReader hand_command("/icub_kovan/action_selector/hand_head_motor_command");
	StringServer human_gaze_where(15006);
	human_gaze_where.start();

	StringServer hand_on_where(15005);
	hand_on_where.start();
	
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/obj1_head_motor_command", "/icub_kovan/action_selector/obj1_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/obj2_head_motor_command", "/icub_kovan/action_selector/obj2_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/obj3_head_motor_command", "/icub_kovan/action_selector/obj3_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/gaze1_head_motor_command", "/icub_kovan/action_selector/gaze1_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/gaze2_head_motor_command", "/icub_kovan/action_selector/gaze2_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/human_head_motor_command", "/icub_kovan/action_selector/human_head_motor_command");
	yarp::os::Network::connect("/icub_kovan/head_motor_calculator/hand_head_motor_command", "/icub_kovan/action_selector/hand_head_motor_command");
	bool icub_sim_on = false;

	MotorController* sim_head_controller;
	MotorController* head_controller;

	try {
		sim_head_controller = new MotorController("icubSim", "head", 10, 10);
		icub_sim_on = true;
		std::cout << "[SCC] Connected to icubSim" << std::endl;
	} catch (std::string e) {
		std::cout << "[ERR] Connecting to icubSim failed" << std::endl;
		std::cout << e << std::endl;
	}

	bool icub_on = false;

	try {
		head_controller = new MotorController("icub", "head", 10, 10);
		icub_on = true;
		std::cout << "[SCC] Connected to icub" << std::endl;
	} catch(std::string e) {
		std::cout << "[ERR] Connecting to icub failed" << std::endl;
		std::cout << e << std::endl;
	}

	while(true) {
		std::vector<double> obj1_mc = obj1_command.getData();
		std::vector<double> obj2_mc = obj2_command.getData();
		std::vector<double> obj3_mc = obj3_command.getData();
		std::vector<double> gaze1_mc = gaze1_command.getData();
		std::vector<double> gaze2_mc = gaze2_command.getData();
		std::vector<double> human_mc = human_command.getData();
		std::vector<double> hand_mc = hand_command.getData();
		std::string hand_where = hand_on_where.getString();
		std::string head_where = human_gaze_where.getString();
		std::vector<double> eight_mc;
		std::vector<double> nine_mc;
		

		int action;
		std::cin >> action; // 1 obj1, 2 obj2, 3 obj3, 4 gaze1, 5 gaze2, 6 human, 7 hand, 8 human gaze'e bak, 9 hand'in üstündekine bak

		switch(action) {
			case 1:
				if(icub_sim_on)
					sim_head_controller->sendCommand(obj1_mc);
				if(icub_on) 
					head_controller->sendCommand(obj1_mc);
				break;
			case 2:
				if(icub_sim_on)
					sim_head_controller->sendCommand(obj2_mc);
				if(icub_on)
					head_controller->sendCommand(obj2_mc);
				break;
			case 3:
				if(icub_sim_on)
					sim_head_controller->sendCommand(obj3_mc);
				if(icub_on)
					head_controller->sendCommand(obj3_mc);
				break;
			case 4:
				if(icub_sim_on)
					sim_head_controller->sendCommand(gaze1_mc);
				if(icub_on)
					head_controller->sendCommand(gaze1_mc);
				break;
			case 5:
				if(icub_sim_on)
					sim_head_controller->sendCommand(gaze2_mc);
				if(icub_on)
					head_controller->sendCommand(gaze2_mc);
				break;
			case 6:
				if(icub_sim_on)
					sim_head_controller->sendCommand(human_mc);
				if(icub_on)
					head_controller->sendCommand(human_mc);
				break;
			case 7:
				if(icub_sim_on)
					sim_head_controller->sendCommand(hand_mc);
				if(icub_on)
					head_controller->sendCommand(hand_mc);
				break;
			case 8:
				eight_mc = human_mc;
				if(head_where == "obj1") {
					eight_mc = obj1_mc;
				} else if(head_where == "obj2") {
					eight_mc = obj2_mc;
				} else if(head_where == "obj3") {
					eight_mc = obj3_mc;
				} else if(head_where == "gaze1") {
					eight_mc = gaze1_mc;
				} else if(head_where == "gaze2") {
					eight_mc = gaze2_mc;
				} else if(head_where == "head") {
					eight_mc = human_mc;
				} 
				if(icub_sim_on)
					sim_head_controller->sendCommand(eight_mc);
				if(icub_on)
					head_controller->sendCommand(eight_mc);
				break;
			case 9:
				nine_mc = human_mc;
				if(hand_where == "obj1") {
					nine_mc = obj1_mc;
				} else if(hand_where == "obj2") {
					nine_mc = obj2_mc;
				} else if(hand_where == "obj3") {
					nine_mc = obj3_mc;
				}
				if(icub_sim_on)
					sim_head_controller->sendCommand(nine_mc);
				if(icub_on)
					head_controller->sendCommand(nine_mc);
				break;
		} 	
	}
	
}
