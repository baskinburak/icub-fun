#include "StringServer.h"
#include <sstream>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>

void StringServer::startServer(int portno) {
	socklen_t clilen;
	struct sockaddr_in serv_addr;
	this->sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (this->sockfd < 0) {
		std::cout << "ERROR opening socket" << std::endl;
		return;
	}

	memset((char*)&serv_addr, 0, sizeof(serv_addr));

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(portno);

	if (bind(this->sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)  {
		std::cout << "ERROR on binding" << std::endl;
		return;
	}

	listen(this->sockfd, 5);
}

void StringServer::run() {
	pthread_mutex_init(&(this->strMutex), NULL);
	this->startServer(this->portno);

	struct sockaddr_in cli_addr;
	char buffer[256];
	while(true) {
		socklen_t clilen = sizeof(cli_addr);
		int newsockfd = accept(this->sockfd, (struct sockaddr*) &cli_addr, &clilen);
		if(newsockfd < 0) {
			std::cout << "ERROR on accept" << std::endl;
			close(newsockfd);
			break;
		}
		memset(buffer, 0, 256);
		int n = read(newsockfd, buffer, 255);
		if(n < 0) {
			std::cout << "ERROR on read" << std::endl;
			close(newsockfd);
			break;
		}
		close(newsockfd);
		std::stringstream ss;
		ss << std::string(buffer);
		pthread_mutex_lock(&(this->strMutex));
		ss >> (this->str);
		pthread_mutex_unlock(&(this->strMutex));
	}
	close(this->sockfd);
}

void StringServer::onStop() {
	std::cout << "StringServer has stopped." << std::endl;
}

void StringServer::beforeStart() {
	std::cout << "StringServer is about to start." << std::endl;
}

void StringServer::afterStart(bool succ) {
	if(succ) {
		std::cout << "StringServer started successfully." << std::endl;
	} else {
		std::cout << "StringServer cannot be started." << std::endl;
	}
}

bool StringServer::threadInit() {
	std::cout << "StringServer initialization..." << std::endl;
	this->str = "";
	return true;
}

void StringServer::threadRelease() {
	std::cout << "StringServer release..." << std::endl;
	close(this->sockfd);
}

std::string StringServer::getString() {
	pthread_mutex_lock(&(this->strMutex));
	std::string ret = this->str;
	pthread_mutex_unlock(&(this->strMutex));
	return ret;
}
